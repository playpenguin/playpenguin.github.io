<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PlayPenguin.Tech-花花企鹅.技术</title><link href="/" rel="alternate"></link><link href="/feeds/linux.atom.xml" rel="self"></link><id>/</id><updated>2015-04-03T09:40:00+08:00</updated><entry><title>关于ｃ语言const修饰符对指针变量的修饰问题</title><link href="/guan-yu-cyu-yan-constxiu-shi-fu-dui-zhi-zhen-bian-liang-de-xiu-shi-wen-ti.html" rel="alternate"></link><updated>2015-04-03T09:40:00+08:00</updated><author><name>dangbinghoo</name></author><id>tag:,2015-04-03:guan-yu-cyu-yan-constxiu-shi-fu-dui-zhi-zhen-bian-liang-de-xiu-shi-wen-ti.html</id><summary type="html">&lt;p&gt;在看同事的jni幻灯片的时候，看到了const 指针，就顺便聊了下，一直都觉得 带 const 修饰符的都应该
在声明的时候赋值，声明之后，再赋值是不过语法检查的。&lt;/p&gt;
&lt;p&gt;结果发现，对于指针来说，情况并不是我想的那样。&lt;/p&gt;
&lt;p&gt;对于char *来说，const 未修饰　变量名称时候，　赋值都是在可以后面随意改动的，也就是指针可以
重新任意赋值，但是赋值后的内存区域是不能修改的，但是若　const 是在修饰　变量名称，那么跟 普通类型变量都一样，
需要声明的时候赋值，否则，根本过不了语法检查。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;xxxxxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;xxxxxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1111111&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;aXXXXX&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//c = &amp;quot;yyyyyy&amp;quot;;
&lt;/span&gt;    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'2'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;str a = %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;str a1 = %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;str c = %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;b = %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;。&lt;/p&gt;
</summary></entry><entry><title>关于 C语言 里的 反射或者内省 的讨论</title><link href="/guan-yu-cyu-yan-li-de-fan-she-huo-zhe-nei-sheng-de-tao-lun.html" rel="alternate"></link><updated>2012-12-18T12:28:00+08:00</updated><author><name>dangbinghoo</name></author><id>tag:,2012-12-18:guan-yu-cyu-yan-li-de-fan-she-huo-zhe-nei-sheng-de-tao-lun.html</id><summary type="html">&lt;p&gt;在语言里面， 根据class名字能够知道其成员的 功能叫做
内省c语言有没有这个功能.&lt;/p&gt;
&lt;p&gt;可以想到的办法是
通过宏，你在定义一个结构体的时候，同时生成了一个数据结构存放了这个class的成员名称，
同时， 得到成员的类型， 比如&amp;nbsp; struct {int a, float b};&lt;/p&gt;
&lt;p&gt;通过例子里面的宏可以得到&amp;nbsp; int a, float b, 这样的字符串的&lt;/p&gt;
&lt;p&gt;这个其实已经解决了上次你做 sql数据库函数时想要的功能&lt;/p&gt;
&lt;p&gt;对了&amp;nbsp; 今天开会研究nvram的意思就是以后我就不用写那个数据库的东西了？&lt;/p&gt;
&lt;p&gt;如果 再得到成员列表字串的时候把类型分立出来， 然后你可以用 &amp;quot;int&amp;quot;,
sizeof(int); &amp;quot;int&amp;quot;, sizeof(float); 这样的东西再做映射，
然后得到一个结构体类型的时候， 即便只有一个指向
class的指针，我们也有办法 把里面的成员一个一个取出来&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;这样， 对于数据库这样，你每次存的数据结构不同，但是query，什么的这些操作相同的这些操作，完全可以只写一个组函数方法就够了，而不用每&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;基本上可以达到 动态语言里面的 内省， 反射 的概念了&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这个我觉得值得研究， 因为后面不用数据库， 但是对于
nvram这样的存储，你还是会处理各种结构，
但是每种结构到时候的一些操作有是一致的，但是仅仅因为数据类不一样而已&lt;/p&gt;
&lt;p&gt;java， c++的这些所谓 ORM 就是依赖于这样的特性才完成的&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&amp;#64;table_a&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;class a {&lt;/div&gt;
&lt;div class="line"&gt;int&amp;nbsp;&amp;nbsp;&amp;nbsp; a;&lt;/div&gt;
&lt;div class="line"&gt;float b;&lt;/div&gt;
&lt;div class="line"&gt;};&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;table_new(a);&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;a a1_obj ;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;a1_obj.a = orm_db_query(a.a);&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在java 和cpp里面是这样用数据库的&lt;/p&gt;
&lt;p&gt;NVRAM 再我看来是 no-sql的非关系型 in-mem 数据库而已&lt;/p&gt;
&lt;p&gt;table_new是创建表？&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;table_new(a); 在java里面用&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&amp;#64;table_a&lt;/div&gt;
&lt;div class="line"&gt;class a {&lt;/div&gt;
&lt;div class="line"&gt;这样的标签就代替了， 你说多轻松啊&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;今天下午我们讨论的是 nvram里面放数据怎么弄，
但是从用户接口来说我希望有类似的效果&lt;/p&gt;
&lt;p&gt;刚才发给你的文件，里面用宏的方式，
再我们声明一个数据类型的时候就扩展得到了一个类的成员和类型列表&lt;/p&gt;
&lt;p&gt;其实对于c来说得到 成员类型名称也白搭，没用，重点是得到&amp;nbsp; struct a {int ,
float, char, char *} ,&amp;nbsp; 这样的信息&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;然后&amp;nbsp; struct memeber_of_class_size = {&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&amp;quot;int&amp;quot;, sizeof(int);&lt;/div&gt;
&lt;div class="line"&gt;&amp;quot;float&amp;quot;, sizeof(float);&lt;/div&gt;
&lt;div class="line"&gt;&amp;quot;char&amp;quot;, sizeof(char);&lt;/div&gt;
&lt;div class="line"&gt;&amp;quot;char *&amp;quot;, sizeof(char *);&lt;/div&gt;
&lt;div class="line"&gt;}&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;然后直接在 struct的地址上通过加&amp;nbsp; sizeof(int)这样的东西来知道成员offset&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;同时也知道了成员的size， 那么就可以做些通用的东西出来了&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;当然python或者sed或者perl等支持正则的来生成一部分代码也是个办法&lt;/p&gt;
&lt;p&gt;以前我们写个结构&amp;nbsp; struct a { int data; void *(*opt) (void*);} ;
这样的东西每次要&amp;nbsp; a.opt = a_opt; 来挂载 方法成员，
现在，在刚才的思路上我们一样可以通过宏的方式来实现这个动作&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;这些库 在c的层面实现了类似的东西， 可以研究下&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.nongnu.org/libunwind/"&gt;http://www.nongnu.org/libunwind/&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://live.gnome.org/GObjectIntrospection"&gt;https://live.gnome.org/GObjectIntrospection&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;别人的例子：&lt;/p&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
&lt;/span&gt;
&lt;span class="cp"&gt;#define MEMBER(TYPE,NAME,MORE) TYPE NAME MORE
&lt;/span&gt;
&lt;span class="cp"&gt;#define TSTRUCT(NAME,MEMBERS) \
  typedef struct NAME { \
    MEMBERS \
  } NAME; \
  const char* const NAME##_Members = #MEMBERS;
&lt;/span&gt;
&lt;span class="cp"&gt;#define PRINT_STRUCT_MEMBERS(NAME) printStructMembers(NAME##_Members)
&lt;/span&gt;
&lt;span class="n"&gt;TSTRUCT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;MEMBER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;,&lt;/span&gt;
  &lt;span class="n"&gt;MEMBER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];,&lt;/span&gt;
  &lt;span class="n"&gt;MEMBER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;);,&lt;/span&gt;
  &lt;span class="n"&gt;MEMBER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;,&lt;/span&gt;
  &lt;span class="p"&gt;)))));&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printStructMembers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Members&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lastLevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pLastType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pLastTypeEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Members&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;MEMBER(&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// strlen(&amp;quot;MEMBER&amp;quot;)
&lt;/span&gt;      &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;lastLevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;pLastType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'('&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;')'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;lastLevel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pLastType&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pLastTypeEnd&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;pLastTypeEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pLastType&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pLastTypeEnd&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pLastType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;pLastTypeEnd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// print type
&lt;/span&gt;        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;] [&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pLastTypeEnd&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// print name
&lt;/span&gt;        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;pLastType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pLastTypeEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="nf"&gt;fadd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fadd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="sc"&gt;'a'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;PRINT_STRUCT_MEMBERS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
</summary></entry><entry><title>学习unix路之愚见</title><link href="/xue-xi-unixlu-zhi-yu-jian.html" rel="alternate"></link><updated>2012-11-27T03:03:00+08:00</updated><author><name>dangbinghoo</name></author><id>tag:,2012-11-27:xue-xi-unixlu-zhi-yu-jian.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;这段时间公司安排带领新人，
加上公司上层软件开发者的一些做事方法和思想我不是很赞同，
深感团队里人的重要性， 以前只是觉得技术和人都不大是问题，
可能机遇才是最难的事情， 但是现在看来，天时地利人和中最怕的是人和了，
一个团队做一件产品，两三年之后还拿不出东西来，做出来的东西如同大学的课程设计，只是一些能工作的代码的组合，界面使用上出现的逻辑以及错误提示达到了令所有常人难以理解的地步，以前真没有这种体会，所以才深感可怕。
这里我并不想对代码层次， 面向对象， 抽象，
以及做C的人根本不懂面向对象这些话题进行口舌，只是结合自己的学习路程，
从单片机硬件到单片机软件，C语言的编程，再到嵌入式linux系统的理解（bootloader到内核以及shell和应用），和python和cpp这样的语言的使用感受来说下我的思维观点：
因为团队很多人并不觉得软件开发都是一回事这种观点，
抽象或者说人的整个做事情思维方式差异太大。&lt;/p&gt;
&lt;p&gt;以下是我对新人的学习建议，这里摘录出来，其中基本也是我的思路和思维方式，其实个人愚见：
你见的多了，自然觉得都是一个道理了，大道至简，简单就是美，联系实际生活人的认知和解决问题的方法是如此之统一和简单，
要不然怎么会有哲学的产生？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;怎么走unix之路？&lt;/h2&gt;
&lt;p&gt;作为unix/linux程序员（有可能被逼的，但是已经是了），
并且作为嵌入式程序员，基本的要求是C语言要掌握，并且能够很轻松的给人说明白什么是指针，什么是一板一眼的做事情（或者写程序的方法），面向对象是一个
很好的方法，不过面向对象的本质很少有人能够真正明白（这个后面你们自己能够体会到，我不想跟人口水了），面向过程的方法，或者使用结构体加几个函数的方
法就是面向对象了，
写程序的时候要多体会这样的好处，也就是要求我们写程序只要想清楚了，你一定会写一两个结构体（数据），
然后围绕这样的数据结构（通常，结构是就是数据结构，并且是作为你后面定义的接口的参数的，联系紧密）再写几个函数（在面向对象的世界里这个东西叫做“方
法”），
如果能够再保证逻辑，处理正确的情况下，你的代码能够很精简，那么你写的代码算是比较好的了，当然这个是个过程，任何时候你都会觉得你以前写的代码不好。&lt;/p&gt;
&lt;p&gt;刚才的一段话算是对unix程序员的第一要求， 第一个阶段。&lt;/p&gt;
&lt;p&gt;现在开始第二个阶段，
在有了结构化编程的思路和习惯之后（形式上并不完美的面向对象吧，你们会慢慢体会到的），
你需要掌握的是unix或者linux环境&lt;/p&gt;
&lt;p&gt;所谓环境：
就是操作系统，或者某种开发包提供的api（函数接口）群，通俗点就叫做库嘛（我故弄玄虚了），
在unix世界中，第一点： 一切是文件，所以对于读写我们通常所说的文件也好，
设备也好，都是几个通用的函数（在unix世界里叫做系统调用
·「其实是操作系统内核实现的」）， read, write, open/close/release.
ioctl( io controll 简写),
所以在了解这几个函数之后，你可以操作很多东西了。&lt;/p&gt;
&lt;p&gt;接着来&lt;/p&gt;
&lt;p&gt;同时， unix又给你提供了一些很有用的思想或者方法：&lt;/p&gt;
&lt;p&gt;进程间通迅： 管道， 消息队列， 共享内存， 乃至socket&lt;/p&gt;
&lt;p&gt;然后，你需要掌握
线程与进程的概念，用到这两个东西的时候会理解到东西多了要打架，
怎么互斥（同时只有一个访问者）？ 线程用锁， 进程用信号量&lt;/p&gt;
&lt;p&gt;然后在C语言与unix操作系统打交道的时候，基本的东西你了解到了吧，
这些了解到后，很多问题就ok了，unix只所以叫做unix，unix思想只所以叫做unix思想，就是用统一，简单的方法来处理一切可以处理的问题
（中文叫做大道至简）， 其实从软件角度来说叫做高度抽象&lt;/p&gt;
&lt;p&gt;一切皆文件，用read，write就可以读写了，
所以李老师才说任何东西就是读或者写，你还能说个啥？&lt;/p&gt;
&lt;p&gt;当然为了适宜不同的东西，ioctl这个也少不了，不过最主要的就是读写了&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;”简单就是美“ unix的第二思想。&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;好了，这样unix就差不多了&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;完了之后，
你可以搞定很多东西了，编程的问题都能够解决了，就是想办法怎么样让自己写软件能够写的轻松，不是每次复制粘贴（复制粘贴在执行的时候没有错，错在后面要改就是一大片，很简单的道理）&lt;/p&gt;
&lt;p&gt;这个时候你需要提升思维方式， 看看别人的代码如何做到看起来很美 ？
抽象怎么个抽象法？ 函数怎么定义不多又不少？&lt;/p&gt;
&lt;p&gt;这个时候的经典例子(我个人认为)就是 uboot代码， linux内核代码，
为什么这么说？
看看这两个东西如何用相同的api来控制这么多的设备的（uboot支持上百种计算机板子，内核就不说了，cpu就上百种），
抽象是啥？ 不是用了c++，java了才有抽象&lt;/p&gt;
&lt;p&gt;这样的阶段是要花很长时间的，说实话，我在这个层是很水的，但是体会和感慨比较多，看的多点，自己就有长进，如何觉得自己写的东西不行，因为你见过别人写的很好的，
自己永远都是觉得落后，，落后&lt;/p&gt;
&lt;p&gt;在这样的过程完了之后， 你就可以从更大的局面来看世界了，
知道什么是架构的科学了，当然这个层面往往争议很多，没有关系，
架构往往其实就是高度抽象， 看看uboot，内核的大架子，也能学习到。&lt;/p&gt;
&lt;p&gt;这个基本是unix环境下的学习思维吧，其实不是windows不适用，
是因为微软的策略不一样，微软是商业公司，他们把api封装到很傻瓜的阶段，
要你关注的是如何生产更多的软件，思想方面，微软自己比较清楚点吧。&lt;/p&gt;
&lt;p&gt;unix，linux的思想是开放的，你也从千千万万的开源代码中可以体会的。&lt;/p&gt;
&lt;p&gt;在某种程度来讲， 开源代码意味着宝藏， 你想知道什么，你就可以下载下来看，
记着每个开源软件都有自己的官方网站（要么在sourceforge上，要么在github，google
code上），
你可以百度，google去看中文的资料，但是记住，要想知道到底是怎么回事，还是老老实实看官方英文（Documents,
wiki）&lt;/p&gt;
&lt;p&gt;开源是可以利用的，在人的生存方面，这个看起来像共产主义社会&lt;/p&gt;
&lt;p&gt;如果你能够在unix环境下面经常工作，那么
除了c语言之外，可能有三个东西很重要： shell， python， perl&lt;/p&gt;
&lt;p&gt;shell就是命令脚本，但是因为shell的灵活性，
你可以做很多事情，掌握好了，你往往用不着立马用C去实现一个程序，写个脚本看看就行了&lt;/p&gt;
&lt;p&gt;比如用for循环来创建目录（上万个也是一瞬间的事情），比如删除上万个.txt文件，
有了命令，你会觉得这个时候鼠标还是作用不怎么大&lt;/p&gt;
&lt;p&gt;python的好处是这个语言可以跟c写的东西，c++写的东西很容易粘接，所以python现在有非常大的资源库，如果你除了上班，还想看看图
形界面编程，但是又觉得c++难，那么python就比较适合了，python通常还用来生成c代码，perl也是，我们这边做cli，和snmp的能够
体会的到&lt;/p&gt;
&lt;p&gt;unix界还有两个比较牛的东西，yacc, lex,
这两个东西在你已经觉得可以用某种你自创的标记来写一点东西的时候就很有用了，因为可以帮助你快速构建编译器&lt;/p&gt;
&lt;p&gt;如果对图形界面感兴趣，那么可以看看Qt，wxWidget，这两个东西都可以用c++，
python语言，并且可以保证你写的东西可以运行在世界上最流行的几个系统，windows,
Mac, unix(BSD)/linux, 而基本不用改任何代码（重新编译就是）&lt;/p&gt;
&lt;p&gt;差不多就这些吧，
可能看起来很多的样子，其实慢慢理下就这些而已，有啥疑问或者兴趣，可以随时交流&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;unix学习方面书的阅读方法：&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;1. c 语言方面: 建议不要看谭浩强的了，直接看 c primer plus&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;2. unix/linux环境方面: unix环境编程， 还有我发的 Linux programing
interface.&lt;/p&gt;
&lt;p&gt;3.
还是要看下算法方面的，数据结构方面的，发的里面都有，通常算法和数据结构都是一起的&lt;/p&gt;
&lt;p&gt;4. 要了解下面向对象，
python看起来比较简单直接些，当然cpp也很不错（不过基本是最复杂的语言在perl6还没面世之前）&lt;/p&gt;
&lt;p&gt;5.
图形界面编程的的QT，wxWidget的我发的也有吧，gtk也不错（不过不是很推荐，用c写界面累，同时gtk的表面在windows上看起来不怎么好看）&lt;/p&gt;
&lt;p&gt;通常 1. 2. 3过了就ok了， 4, 5 就看你自己的兴趣了&lt;/p&gt;
&lt;p&gt;对于我们比较专门的cli，snmp我的建议是既然是开源的软件包，用我说的看官方手册的方法看就是了，这才是深入了解的唯一途径&lt;/p&gt;
&lt;p&gt;对于代码的思维方式，软件结构，层次方面，看别人写的漂亮代码，慢慢琢磨体会。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;strong&gt;内核以及驱动方面的感受&lt;/strong&gt;--- 学习不可不深入&lt;/h2&gt;
&lt;div&gt;&lt;p&gt;接着来说下我对 &lt;strong&gt;内核以及驱动方面的感受&lt;/strong&gt; ：&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;1. 驱动开发的确是件很难的事情;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;2. 任何事情肯定有方法。&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;对于内核开发（其实我不喜欢这种说法，因为很多时候，我们仅仅是利用下驱动，或者写个简单的驱动，这跟内核上游开发高手简直不一个层面，所以不喜欢随便就在说内核开发），
往往是从驱动开始的，也最容易入手。&lt;/p&gt;
&lt;p&gt;但内核驱动本身是一件不容易的事情， 掌握驱动开发， 要看的书就是
linux设备驱动程序（目前最新是第三版）， 在看了hello
world的module例子之后，我的建议是看看字符驱动设备就可以停止下来明确一个概念了，
往往很多书籍把这个事情没说透（其实不是我耍大牌，书籍往往认为我们很有灵性，一点即通），
其实我们在用户空间操作文件用的
read/write函数（记着叫做系统调用）是由操作系统最终给你接口的，事实上（我的理解，不一定非常准确，但是我认为能帮组你理解）
系统调用是跟内核驱动直接挂钩的（内核做的）， &lt;strong&gt;当你在用户空间尝试
read/write的时候，实际上最终执行到了内核中的代码&lt;/strong&gt;
，具体就是读写一个设备文件的时候， 调用到驱动里面的 read/write方法，
只要把握这一点，你就会明白*写驱动程序其实是填空了*，
我们需要填充内核里面对文件的几个常见操作就可以了。&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;为什么写驱动程序是填空？&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line"&gt;操作系统是别人开发的，你用的linux是个unix内核的实现，全部都是unix的思想，&lt;/div&gt;
&lt;div class="line"&gt;内核最终是个抽象体， 内核里面抽象了所有事务的操作方式，&lt;/div&gt;
&lt;div class="line"&gt;别人做的抽象，所以你就是填空了，&lt;/div&gt;
&lt;div class="line"&gt;所以拿我们自己的SDK来说，开发设备也就是填空吧。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;驱动程序往往是通用的&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;本来体会到上面的那点就可以了，你已经比较清楚开发内核驱动的思路了，&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line"&gt;但是请注意一点（这下我要说下百度和国内技术达人blog害人之初了，你可以喷我，没关系！），&lt;/div&gt;
&lt;div class="line"&gt;千万不要从国内的blog上面去看大部分抄袭的内核驱动实例（以2410,2440的最为泛滥），这些人写东西往往有个很明显的标志：&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
#ifdef CPU_S3C2440 || CPU_S3C2440 .... gpio_set_output(xxxx);
&lt;/pre&gt;
&lt;p&gt;而这样的驱动程序确是放到 driver 目录下面，
这里的东西可以看看内核带的例子，
几乎所有的驱动里面都是跟平台代码无关的，至少不会认cpu，
板子的不同做不同的动作，
在内核里面，内核对任何一类设备都有所谓的子系统，这就是内核对设备与硬件相关性的抽象，抽象过了，自然就不用在驱动里面写平台上的代码了。&lt;/p&gt;
&lt;p&gt;因为那些blog的误导（当时我对驱动不理解啊，这个影响真的很大），
我一直搞不懂，为什么dm9000网卡驱动在我编译x86代码的时候也可以看到，但是dm9000的内核代码里面并没有x86上专门的语句呢？
内核究竟如何处理这些问题的，
这个问题纠结了很久，只到有天我看到内核有个机制叫做 platform 驱动机制，
对于dm9000网口，
不同平台的初始化代码肯定不同，但是这些跟平台相关的代码是专门做了结构体的，让你在arch/arm/xxx-board(或platform).c里
面去实现的。 所以才最终明白， 被大家整天以大侠相称的大哥们搞错了！&lt;/p&gt;
&lt;p&gt;理解到这个地方的时候才突然意识到驱动开发那本经典书里面说的子系统的意义了，
对于一个设备来说，
初始化，每个cpu或者板子肯定是不同的，那么把这部分东西统一放到平台cpu相关里面去，
后面去看，才发现，对于每个驱动，平台里面都会做统一的初始化，并且这些方法最终统一挂到内核提供的init方法列表里面，
也有点明白内核的抽象机制了。&lt;/p&gt;
&lt;p&gt;所以， 我的建议就是看东西，
还是看原作者给的资料最靠谱（就这个例子，应该我们买的几乎所有国产linux驱动开发，嵌入式linux里面的例子都搞错了！！），
内核的Documents里面给了说明的， 内核带的驱动代码也是例子。&lt;/p&gt;
&lt;p&gt;所以，做事情还是要严谨， 能工作，跟写的良好还是两码事！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;个人认为，
面向对象是一种提高代码重用的机制，同时也是使用抽象思维解决问题的一种方法，
并不是你的java语言或者js语言内建了面向对象你用了几个class就知道了面向对象了，
本身如何用好面向对象还是需要个人项目磨练的，随着你做的东西越多，你对世界的认识会越抽象和统一，所以个人认为你画了几个类图，基本都是平铺的联系，然后看起来“像模块”一样的东西之间还箭头乱飞，千丝万缕的，那么我就认为其实你并不懂什么叫做面向对象，本身你也缺乏逻辑层次分明的处理哪怕平常事务的能力，程序写着写着就应该是你的生活和思维方式的体现了。&lt;/p&gt;
&lt;p&gt;在c语言里，
用struct加上函数指针和static关键字，你就可以构建一个面向对象的编程方式，至少在c的层面不用什么宏扩展，来构建一个很类似c++的面向对象编程模式也是很容易的，linux内核如何将千万种设备管理了起来的，如何把一切东西都抽象到文件操作的？
c就不能面向对象了？ linux是c面向对象最好最好的典范了！&lt;/p&gt;
&lt;p&gt;其实，个人愚见：
&lt;strong&gt;不管做什么事情&lt;/strong&gt;，&lt;strong&gt;人是逻辑思维动物&lt;/strong&gt;，&lt;strong&gt;有条理的做事风格是很关键的&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;
</summary></entry><entry><title>linux flash插件等程序声音不正常的原因： 笔记本多个声卡， 需要配置</title><link href="/linux-flashcha-jian-deng-cheng-xu-sheng-yin-bu-zheng-chang-de-yuan-yin-bi-ji-ben-duo-ge-sheng-qia-xu-yao-pei-zhi.html" rel="alternate"></link><updated>2012-06-17T13:00:00+08:00</updated><author><name>dangbinghoo</name></author><id>tag:,2012-06-17:linux-flashcha-jian-deng-cheng-xu-sheng-yin-bu-zheng-chang-de-yuan-yin-bi-ji-ben-duo-ge-sheng-qia-xu-yao-pei-zhi.html</id><summary type="html">&lt;p&gt;前段实际系统是Arch linux，
当时什么程序都能放出声音来就是flash不行，一直无声状态， 始终没有搞定。&lt;/p&gt;
&lt;p&gt;这几天因为做嵌入式的原因，系统换成了Funtoo， 个人感觉就是改进了Gentoo 的
emerge --sync 吧， 其他的还不怎么明显， 也没体会到，感觉根Gentoo无异了，
不过系统装起来， 声音还是不正常， 播放mplayer说&lt;/p&gt;
&lt;p&gt;alsa-lib: pcm_dmix.c:1018:(snd_pcm_dmix_open) unable to open slave&lt;/p&gt;
&lt;p&gt;Google之发现是因为系统多个声卡， 没有配置的情况下会选择0,
alsamixer里面我的声卡也是两个， 第一个是什么hdmi的声卡， 哎，
感觉无奈，这个东东有用么， 不过还是自己水平低，
真正的声卡处于第二个位置， 突然想到这也是flash无声的缘故了吧， 随即编辑
.asoundrc 或者 /etc/asound.conf&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pcm.!default {
    type hw
    card 1
}

ctl.!default {
    type hw
    card 1
}
&lt;/pre&gt;
&lt;p&gt;立马试验果真mplayer和flash都有声音了。&lt;/p&gt;
&lt;p&gt;突然觉得很久时间没有做LFS，用Gentoo，linux水平降低太多了。&lt;/p&gt;
</summary><category term="asound.rc"></category></entry><entry><title>使用ostinato做网络开发分析辅助工具</title><link href="/shi-yong-ostinatozuo-wang-luo-kai-fa-fen-xi-fu-zhu-gong-ju.html" rel="alternate"></link><updated>2012-04-24T06:46:00+08:00</updated><author><name>dangbinghoo</name></author><id>tag:,2012-04-24:shi-yong-ostinatozuo-wang-luo-kai-fa-fen-xi-fu-zhu-gong-ju.html</id><summary type="html">&lt;p&gt;最近参与公司一个项目, 需要在L2工作, 封包是经常的事情,之前一直用N2X,
需要排队, 后面搜索网络发现了ostinato工具， 虽然还在成长中,
但是已经非常强大够用了.&lt;/p&gt;
&lt;p&gt;特淘宝淘了个双口的千兆网卡, 拿回来装起, 先跑server drone程序,
然后开ostinato客户端, 计算机上的eth0,1,2均认的出来,
然后drone跑对了之后就port group可用了, 点击eth,
新建stream里面就可以选择L2, Vlan等选项, 非常强大，
另外发现intel的网卡芯片才支持vlan, 可以抓到带vlan标签的包,
正好淘的网卡是intel的服务器专用卡, 不错!,&lt;/p&gt;
&lt;p&gt;这里记下, 有用的同学可以参考下.&lt;/p&gt;
</summary><category term="ostinato"></category></entry><entry><title>acer aspire 4560G A6 apu notebook arch linux installation tips</title><link href="/acer-aspire-4560g-a6-apu-notebook-arch-linux-installation-tips.html" rel="alternate"></link><updated>2012-04-18T15:54:00+08:00</updated><author><name>dangbinghoo</name></author><id>tag:,2012-04-18:acer-aspire-4560g-a6-apu-notebook-arch-linux-installation-tips.html</id><summary type="html">&lt;p&gt;arch linux or gentoo linux installtion on Acer aspire 4560G will always
have troubles.&lt;/p&gt;
&lt;div class="section" id="the-video-driver-just-note"&gt;
&lt;h2&gt;the video driver. JUST &lt;strong&gt;NOTE&lt;/strong&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;amd catalyst driver will not works at all, I tired 1 year before, it
failed. and failed again today.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, you only need the opensource driver xf86-video-ati and use radeon
only with GPU integrated with APU. the HD chip will not work with radeon&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-bcm43227-wireless-driver"&gt;
&lt;h2&gt;the bcm43227 wireless driver.&lt;/h2&gt;
&lt;p&gt;Just black list kernel default driver:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;blacklist b43&lt;/li&gt;
&lt;li&gt;blacklist bcma&lt;/li&gt;
&lt;li&gt;blacklist ssb&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and download broadcom official sta linux driver. and compile from
source, 3.x kernel need this patch&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat bc_wl_abiupdate.patch
332c332
&amp;lt; &amp;nbsp;&amp;nbsp; &amp;nbsp;.ndo_set_multicast_list = wl_set_multicast_list,
---
&amp;gt; &amp;nbsp;&amp;nbsp; &amp;nbsp;.ndo_set_rx_mode = wl_set_multicast_list,

patch -p0 src/wl/sys/wl_linux.c &amp;lt; bc_wl_abiupdate.patch
cp -rf wl.ko /lib/modules/`uname -r`/kernel/drivers/net/wireless/
sudo depmod
sudo modprobe wl
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="audio-card"&gt;
&lt;h2&gt;audio card:&lt;/h2&gt;
&lt;p&gt;blacklist snd_hda_codec_hdmi&lt;/p&gt;
&lt;/div&gt;
</summary><category term="4560g"></category><category term="acer"></category><category term="Linux"></category></entry><entry><title>如何恢复mysql inno db 损毁的数据库表内容 ?</title><link href="/ru-he-hui-fu-mysql-inno-db-sun-hui-de-shu-ju-ku-biao-nei-rong.html" rel="alternate"></link><updated>2012-03-31T09:01:00+08:00</updated><author><name>dangbinghoo</name></author><id>tag:,2012-03-31:ru-he-hui-fu-mysql-inno-db-sun-hui-de-shu-ju-ku-biao-nei-rong.html</id><summary type="html">&lt;p&gt;一次机器的强制关机,导致了服务器mysql数据库启动失败,
说是数据库因为关机问题,数据写入不正常, 无法启动,
使用mysql的数据库恢复功能没能成功&lt;/p&gt;
&lt;p&gt;因为自己当时不知道数据库自己恢复的条件,只拷贝备份了数据库目录,
并没有备份idb和idb的log1,log2两个文件,所以自动恢复没法进行,基本上是数据&lt;/p&gt;
&lt;p&gt;已经丢失了&lt;/p&gt;
&lt;p&gt;网上去搜索发现有个恢复工具, 开源的 就拿试试, 果然最终还是解救到了数据.&lt;/p&gt;
&lt;p&gt;基本思路是, inno db引擎的数据库文件是 frm放 表项索引,
idb里面是表的具体内容, 只要idb文件在, 一般都是可以恢复的&lt;/p&gt;
&lt;p&gt;步骤如下:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;ol class="first arabic"&gt;
&lt;li&gt;使用工具 将idb文件分割得到很多page文件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol class="first arabic" start="2"&gt;
&lt;li&gt;然后page文件全部cat到一个大文件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;3. 找到你的表的结构: 我这里因为是服务器还在,
可以从原来正确的数据库里面读取到表的结构, 就是知道表当时是如何创建的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;,使用 show table create &amp;lt;tablename&amp;gt;; sql 命令 就可以得到.&lt;/p&gt;
&lt;p&gt;这里工具里面有个脚本, 配置上你的参数, 叫自己去读,然后会生成一个头文件,
这个下面需要用来编译提取这个表用的解析器.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;但是我的情况是&lt;/em&gt;数据库新建的表没有使用innodb格式了,所以需要将那个脚本里面的判断是不是innodb的语句注释,要不然头文件是空的.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;ol class="first arabic" start="4"&gt;
&lt;li&gt;make继续生成解析器&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol class="first arabic" start="5"&gt;
&lt;li&gt;使用解析器提取数据到tsv文件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol class="first arabic" start="6"&gt;
&lt;li&gt;使用sql语句将tsv文件内容导入数据库的表中,完成数据恢复.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里注意: tsv文件需要放到你的数据库文件所在的目录里面.&lt;/p&gt;
&lt;p&gt;具体, 还是看官方的手册和这个绝对指导意义的文章吧 :&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.linezing.com/blog/?p=1371"&gt;http://www.linezing.com/blog/?p=1371&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方wiki详细手册:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.percona.com/docs/wiki/innodb-data-recovery-tool:mysql-data-recovery:start"&gt;http://www.percona.com/docs/wiki/innodb-data-recovery-tool:mysql-data-recovery:start&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意官方的wiki是分了几个小节,每个小节一个页面.&lt;/p&gt;
&lt;p&gt;另外.我把这个繁琐的过程写了个临时的脚本, 基本都可以工作:
需要者下载下来自己根据情况调整, 脚本的内容反应了整个完整过程:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.playpenguin.net/blog/wp-content/uploads/2012/03/recovery_data.txt"&gt;recovery_data&lt;/a&gt;.sh&lt;/p&gt;
</summary></entry><entry><title>seascope代码阅读器支持编辑补丁</title><link href="/seascopedai-ma-yue-du-qi-zhi-chi-bian-ji-bu-ding.html" rel="alternate"></link><updated>2012-02-18T14:22:00+08:00</updated><author><name>dangbinghoo</name></author><id>tag:,2012-02-18:seascopedai-ma-yue-du-qi-zhi-chi-bian-ji-bu-ding.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://code.google.com/p/seascope/"&gt;Seascope&lt;/a&gt;
是一个pyQt写的代码阅读工具，在linux原来的kscope其实功能很强大，绝对可比source
Insight，不过，kde到4之后就没维护了，后来偶遇seascope，不过当时是0.3版本，代码显示的时候字体不能改变，文件也是只读，没法编辑，不过函数定义，引用等搜索功能确是完整的，但是下下来用了用不是很方便编辑就不了了之了。&lt;/p&gt;
&lt;p&gt;前两天同事又问linux下面代码阅读工具，就又去看了看，发现出0.4版本了，下载来看了下变化比较大，不过编辑功能还是没有啊，看了看是pyQt，正好自己还是想深入学习下python，那看看能不能自己改改呢
？
两天努力下来还真基本给实现了，支持一般的代码编辑器的编辑功能了，保存文件也基本可以工作了，不过可能有一些小bug
，patch邮件给了原作者，不过不知道作者会不会接受了。&lt;/p&gt;
&lt;p&gt;这里给出patch&lt;/p&gt;
&lt;pre class="literal-block"&gt;
diff -purN seascope-0.4/src/Seascope.py seascope-0.4-dbh/src/Seascope.py
--- seascope-0.4/src/Seascope.py&amp;nbsp;&amp;nbsp; &amp;nbsp;2011-12-15 13:43:26.000000000 +0800
+++ seascope-0.4-dbh/src/Seascope.py&amp;nbsp;&amp;nbsp; &amp;nbsp;2012-02-18 21:40:33.883159528 +0800
&amp;#64;&amp;#64; -37,6 +37,9 &amp;#64;&amp;#64; class SeascopeApp(QMainWindow):

&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;def file_close_cb(self):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.edit_book.close_current_page()
+&amp;nbsp;&amp;nbsp; &amp;nbsp;def file_save_cb(self):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.edit_book.save_current_page()
+
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;def closeEvent(self, ev):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if not self.exit_dont_ask and backend.proj_is_open():
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ret = DialogManager.show_yes_no_dontask('Close project and quit?')
&amp;#64;&amp;#64; -46,6 +49,7 &amp;#64;&amp;#64; class SeascopeApp(QMainWindow):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if ret == 2:
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.exit_dont_ask = True
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.app_write_config()
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.edit_book.close_all_cb()
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ev.accept()

&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;def go_prev_res_cb(self):
&amp;#64;&amp;#64; -80,10 +84,18 &amp;#64;&amp;#64; class SeascopeApp(QMainWindow):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;m_file.addAction('&amp;amp;Preferences', self.file_preferences_cb)
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;m_file.addAction('&amp;amp;Debug', self.show_dbg_dialog, 'Ctrl+D')
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;m_file.addSeparator()
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;m_file.addAction('&amp;amp;Save', self.file_save_cb, 'Ctrl+S')
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;m_file.addAction('&amp;amp;Close', self.file_close_cb, QKeySequence.Close)
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;m_file.addAction('&amp;amp;Quit', self.close, QKeySequence.Quit)

&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;m_edit = menubar.addMenu('&amp;amp;Edit')
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;m_edit.addAction('Undo', self.edit_book.undo_edit_cb, 'Ctrl+Z')
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;m_edit.addAction('Rebo', self.edit_book.redo_edit_cb, 'Ctrl+Y')
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;m_edit.addSeparator()
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;m_edit.addAction('Copy', self.edit_book.copy_edit_cb, 'Ctrl+C')
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;m_edit.addAction('Paste', self.edit_book.paste_edit_cb, 'Ctrl+V')
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;m_edit.addAction('Cut', self.edit_book.cut_edit_cb, 'Ctrl+X')
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;m_edit.addSeparator()
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;m_edit.addAction('&amp;amp;Find...', self.edit_book.find_cb, 'Ctrl+F')
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;m_edit.addAction('Find &amp;amp;Next', self.edit_book.find_next_cb, 'F3')
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;m_edit.addAction('Find &amp;amp;Previous', self.edit_book.find_prev_cb, 'Shift+F3')
&amp;#64;&amp;#64; -225,7 +237,9 &amp;#64;&amp;#64; class SeascopeApp(QMainWindow):

&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;backend.proj_close()

-&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.edit_book.clear()
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;#self.edit_book.save
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;#self.edit_book.clear()
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.edit_book.close_all_cb()
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.res_book.clear()
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.file_view.clear()

diff -purN seascope-0.4/src/view/EdView.py seascope-0.4-dbh/src/view/EdView.py
--- seascope-0.4/src/view/EdView.py&amp;nbsp;&amp;nbsp; &amp;nbsp;2011-12-15 13:43:26.000000000 +0800
+++ seascope-0.4-dbh/src/view/EdView.py&amp;nbsp;&amp;nbsp; &amp;nbsp;2012-02-18 21:34:47.177440306 +0800
&amp;#64;&amp;#64; -18,6 +18,7 &amp;#64;&amp;#64; from CtagsView import *

&amp;nbsp;class EditorView(QsciScintilla):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ev_popup = None
+&amp;nbsp;&amp;nbsp; &amp;nbsp;sig_file_modified = pyqtSignal(bool)
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;def __init__(self, parent=None):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;QsciScintilla.__init__(self, parent)
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;#self.setGeometry(300, 300, 400, 300)
&amp;#64;&amp;#64; -32,6 +33,9 &amp;#64;&amp;#64; class EditorView(QsciScintilla):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.font = None
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.lexer = None

+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;# use the setting
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.ed_settings_1()
+
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;def get_filename(self):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;return self.filename

&amp;#64;&amp;#64; -56,6 +60,7 &amp;#64;&amp;#64; class EditorView(QsciScintilla):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;## Folding visual : we will use boxes
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.setFolding(QsciScintilla.BoxedTreeFoldStyle)

+
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;def show_line_number_cb(self, val):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if (val):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;width = self.fm.width( &amp;quot;00000&amp;quot; ) + 5
&amp;#64;&amp;#64; -83,6 +88,10 &amp;#64;&amp;#64; class EditorView(QsciScintilla):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.lexer.setFont(self.font,-1)
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.setLexer(self.lexer)

+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;## FIXME:Auto-Complete Support
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.setAutoCompletionThreshold(1)
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.setAutoCompletionSource(QsciScintilla.AcsAPIs)
+
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;def open_file(self, filename):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.filename = filename

&amp;#64;&amp;#64; -101,15 +110,34 &amp;#64;&amp;#64; class EditorView(QsciScintilla):

&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;## Show this file in the editor
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.setText(open(filename).read())
+
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;## process for modifiled.
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.setModified(False)
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.modificationChanged.connect(self.modifiedChanged)

&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;## Mark read-only
-&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.setReadOnly(True)
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;#self.setReadOnly(True)
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.show()

&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;#self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.setFocus()

+
+&amp;nbsp;&amp;nbsp; &amp;nbsp;# FIXME: saveFile cb too simpile for large file.
+&amp;nbsp;&amp;nbsp; &amp;nbsp;def save_file(self, filename):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if(self.isModified()):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;fobj = open(filename, 'w')
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if (not fobj.closed):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;fobj.write(str(self.text()))
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;fobj.flush()
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;fobj.close()
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.setModified(False)
+
+&amp;nbsp;&amp;nbsp; &amp;nbsp;# sig for file modified.
+&amp;nbsp;&amp;nbsp; &amp;nbsp;def modifiedChanged(self):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.sig_file_modified.emit(self.isModified())
+
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;def goto_line(self, line):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;line = line - 1
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.setCursorPosition(line, 0)
&amp;#64;&amp;#64; -154,7 +182,7 &amp;#64;&amp;#64; class EditorBook(QTabWidget):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.tabCloseRequested.connect(self.close_cb)
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.currentChanged.connect(self.tab_change_cb)

-&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.is_show_line = False
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.is_show_line = True
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.f_text = None
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.ev_font = &amp;quot;Monospace,10,-1,5,50,0,0,0,0,0&amp;quot;

&amp;#64;&amp;#64; -165,6 +193,7 &amp;#64;&amp;#64; class EditorBook(QTabWidget):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ed.ev.set_font(self.ev_font)
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.addTab(ed, fileName)

+
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;def get_current_word(self):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ed = self.currentWidget()
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if not ed:
&amp;#64;&amp;#64; -221,20 +250,64 &amp;#64;&amp;#64; class EditorBook(QTabWidget):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if page:
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;page.ev.setFocus()

+
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;def close_current_page(self):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.removeTab(self.currentIndex())
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.focus_editor()

+&amp;nbsp;&amp;nbsp; &amp;nbsp;# save current file
+&amp;nbsp;&amp;nbsp; &amp;nbsp;def save_current_page(self):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;page = self.widget(self.currentIndex())
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;filename = page.get_filename()
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if (filename):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;page.ev.save_file(filename)
+
+&amp;nbsp;&amp;nbsp; &amp;nbsp;def save_all_file(self):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;for i in range(self.count()):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;page = self.widget(i)
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;filename = page.get_filename()
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if (filename):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;page.ev.save_file(filename)
+
+&amp;nbsp;&amp;nbsp; &amp;nbsp;def page_modified_cb(self, isModifiled):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;inx = self.currentIndex()
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;filename = self.tabText(inx)
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;# Sign modified.
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if isModifiled:
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;filename = &amp;quot;*&amp;quot; + filename
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.setTabText(inx, filename)
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;else:
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;filename = str(filename)
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;filename = filename.strip('*')
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.setTabText(inx, filename)
+
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;def focus_search_ctags(self):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ed = self.currentWidget()
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if ed:
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ed.cv.le.setFocus()

&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;def close_cb(self, inx):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;page = self.widget(self.currentIndex())
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if (page.ev.isModified()):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if DialogManager.show_yes_no(&amp;quot;Do you want to save files ?&amp;quot;):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.save_current_page()
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.removeTab(inx)
+
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;def close_all_cb(self):
-&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if DialogManager.show_yes_no(&amp;quot;Close all files ?&amp;quot;):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;needSave = False
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;for i in range(self.count()):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;page = self.widget(i)
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if (page.ev.isModified()):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;needSave = True
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;break
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if needSave:
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if DialogManager.show_yes_no(&amp;quot;Save all changes ?&amp;quot;):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.save_all_file()
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.clear()
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;else:
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if DialogManager.show_yes_no(&amp;quot;Close all files ?&amp;quot;):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.clear()
+
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;def tab_change_cb(self, inx):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if (inx == -1):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;fname = ''
&amp;#64;&amp;#64; -275,6 +348,9 &amp;#64;&amp;#64; class EditorBook(QTabWidget):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;page.ev.set_font(self.ev_font)
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;page.ev.show_line_number_cb(self.is_show_line)
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.addTab(page, os.path.basename(filename))
+
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;# modified signal callback
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;page.ev.sig_file_modified.connect(self.page_modified_cb)

&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.setCurrentWidget(page)
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if (line != None):
&amp;#64;&amp;#64; -282,9 +358,11 &amp;#64;&amp;#64; class EditorBook(QTabWidget):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.sig_history_update.emit(filename, line)
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;page.ev.setFocus()

+
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;def show_file(self, filename):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;self.show_file_line(filename, None)

+
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;def find_cb(self):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ed = self.currentWidget()
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if not ed:
&amp;#64;&amp;#64; -357,3 +435,31 &amp;#64;&amp;#64; class EditorBook(QTabWidget):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;cmd = cmd.replace('%F', f).replace('%L', str(l))
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if not QProcess.startDetached(cmd):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;DialogManager.show_msg_dialog('Failed to start: ' + cmd)
+
+&amp;nbsp;&amp;nbsp; &amp;nbsp;# redo editing callback
+&amp;nbsp;&amp;nbsp; &amp;nbsp;def redo_edit_cb(self):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ed = self.currentWidget()
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if (ed):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ed.ev.redo()
+
+&amp;nbsp;&amp;nbsp; &amp;nbsp;# undo editing callback
+&amp;nbsp;&amp;nbsp; &amp;nbsp;def undo_edit_cb(self):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ed = self.currentWidget()
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if (ed):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ed.ev.undo()
+
+&amp;nbsp;&amp;nbsp; &amp;nbsp;# edting callbacks
+&amp;nbsp;&amp;nbsp; &amp;nbsp;def copy_edit_cb(self):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ed = self.currentWidget()
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if (ed):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ed.ev.copy()
+
+&amp;nbsp;&amp;nbsp; &amp;nbsp;def cut_edit_cb(self):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ed = self.currentWidget()
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if (ed):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ed.ev.cut()
+
+&amp;nbsp;&amp;nbsp; &amp;nbsp;def paste_edit_cb(self):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ed = self.currentWidget()
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;if (ed):
+&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;ed.ev.paste()
&lt;/pre&gt;
&lt;p&gt;顺便上张图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Seascope修改" src="http://www.playpenguin.net/blog/wp-content/uploads/2012/02/seascope.png" /&gt;&lt;/p&gt;
</summary><category term="seascope"></category></entry><entry><title>关于linux文件系统的sync,async, sync/fsync 命令</title><link href="/guan-yu-linuxwen-jian-xi-tong-de-syncasync-syncfsync-ming-ling.html" rel="alternate"></link><updated>2011-11-18T11:15:00+08:00</updated><author><name>dangbinghoo</name></author><id>tag:,2011-11-18:guan-yu-linuxwen-jian-xi-tong-de-syncasync-syncfsync-ming-ling.html</id><summary type="html">&lt;p&gt;linux默认情况下几乎所有应用场合都是不会将文件立马保存入磁盘的，在嵌入式上也是同样的表现，如果mount时候加上sync选项就可以保证数据立马写入，但是这种会造成系统较多的写入磁盘，磁盘的寿命就不会太长了，如果是需要保存数据，可以显式调用命令sync来写入所有文件，或者fsync来保存某个文件。&lt;/p&gt;
</summary><category term="Linux"></category><category term="sync"></category><category term="文件系统"></category></entry><entry><title>shell获取进程ID的方法： pidof | pgrep | ps-A+grep+awk</title><link href="/shellhuo-qu-jin-cheng-idde-fang-fa-pidof-pgrep-ps-agrepawk.html" rel="alternate"></link><updated>2011-11-18T11:08:00+08:00</updated><author><name>dangbinghoo</name></author><id>tag:,2011-11-18:shellhuo-qu-jin-cheng-idde-fang-fa-pidof-pgrep-ps-agrepawk.html</id><summary type="html">&lt;p&gt;shell获取进程ID的方法：&lt;/p&gt;
&lt;p&gt;我知道和实践过的有这么三种：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&amp;nbsp;ps -A |grep &amp;quot;cmdname&amp;quot;| awk '{print $1}'&lt;/li&gt;
&lt;li&gt;&amp;nbsp;pidof &amp;quot;cmdname&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;nbsp;pgrep &amp;quot;cmdname&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这三种在bash和busybox ash里面的运行结果稍有不同，&lt;/p&gt;
&lt;p&gt;第一种完全相同，但是因为调用命令次数较多，性能上是不行的。&lt;/p&gt;
&lt;p&gt;第二种： pidof 只能获取程序的文件名匹配到的进程号，在ash中 比如 pidof
&amp;quot;usr/bin/telnetd&amp;quot; 和 pidof &amp;quot;telnetd&amp;quot;中结果不一样，
前一种结果为空，但是在bash中执行两者一样。&lt;/p&gt;
&lt;p&gt;第三种： pgrep跟1的效果相同，因为是单一命令，比第一种性能要好得多。&lt;/p&gt;
&lt;p&gt;所以nanoRC就改进为pgrep。&lt;/p&gt;
</summary><category term="pgrep"></category><category term="pidof"></category><category term="shell"></category><category term="进程ID"></category></entry><entry><title>linux编程库libevent</title><link href="/linuxbian-cheng-ku-libevent.html" rel="alternate"></link><updated>2011-11-16T11:27:00+08:00</updated><author><name>dangbinghoo</name></author><id>tag:,2011-11-16:linuxbian-cheng-ku-libevent.html</id><summary type="html">&lt;div class="section" id="libevent-an-event-notification-library"&gt;
&lt;h2&gt;libevent – an event notification library&lt;/h2&gt;
&lt;p&gt;发现一个跨平台的event库：&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;libevent&lt;/em&gt; API provides a mechanism to execute a callback function
when a specific event occurs on a file descriptor or after a timeout has
been reached. Furthermore, &lt;em&gt;libevent&lt;/em&gt; also support callbacks due to
&lt;strong&gt;signals&lt;/strong&gt; or regular &lt;strong&gt;timeouts&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Libevent additionally provides a sophisticated framework for buffered
network IO, with support for sockets, filters, rate-limiting, SSL,
zero-copy file transmission, and IOCP. Libevent includes support for
several useful protocols, including DNS, HTTP, and a minimal RPC
framework.&lt;/p&gt;
&lt;p&gt;支持基于网络的事件消息。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="libevent"></category><category term="Linux"></category></entry></feed>